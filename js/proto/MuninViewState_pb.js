// source: MuninViewState.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.MuninViewState', null, global);
goog.exportSymbol('proto.MuninViewState.Address', null, global);
goog.exportSymbol('proto.MuninViewState.ViewState', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MuninViewState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MuninViewState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MuninViewState.displayName = 'proto.MuninViewState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MuninViewState.ViewState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MuninViewState.ViewState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MuninViewState.ViewState.displayName = 'proto.MuninViewState.ViewState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MuninViewState.Address = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MuninViewState.Address, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MuninViewState.Address.displayName = 'proto.MuninViewState.Address';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MuninViewState.prototype.toObject = function(opt_includeInstance) {
  return proto.MuninViewState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MuninViewState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MuninViewState.toObject = function(includeInstance, msg) {
  var f, obj = {
    viewstate: (f = msg.getViewstate()) && proto.MuninViewState.ViewState.toObject(includeInstance, f),
    address: (f = msg.getAddress()) && proto.MuninViewState.Address.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MuninViewState}
 */
proto.MuninViewState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MuninViewState;
  return proto.MuninViewState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MuninViewState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MuninViewState}
 */
proto.MuninViewState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MuninViewState.ViewState;
      reader.readMessage(value,proto.MuninViewState.ViewState.deserializeBinaryFromReader);
      msg.setViewstate(value);
      break;
    case 2:
      var value = new proto.MuninViewState.Address;
      reader.readMessage(value,proto.MuninViewState.Address.deserializeBinaryFromReader);
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MuninViewState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MuninViewState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MuninViewState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MuninViewState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getViewstate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MuninViewState.ViewState.serializeBinaryToWriter
    );
  }
  f = message.getAddress();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.MuninViewState.Address.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MuninViewState.ViewState.prototype.toObject = function(opt_includeInstance) {
  return proto.MuninViewState.ViewState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MuninViewState.ViewState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MuninViewState.ViewState.toObject = function(includeInstance, msg) {
  var f, obj = {
    latitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    longitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    unknown5: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    yaw: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    pitch: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    unknown8: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MuninViewState.ViewState}
 */
proto.MuninViewState.ViewState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MuninViewState.ViewState;
  return proto.MuninViewState.ViewState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MuninViewState.ViewState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MuninViewState.ViewState}
 */
proto.MuninViewState.ViewState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatitude(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitude(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setUnknown5(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setYaw(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPitch(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setUnknown8(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MuninViewState.ViewState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MuninViewState.ViewState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MuninViewState.ViewState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MuninViewState.ViewState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLatitude();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getLongitude();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getUnknown5();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getYaw();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getPitch();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getUnknown8();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
};


/**
 * optional double latitude = 1;
 * @return {number}
 */
proto.MuninViewState.ViewState.prototype.getLatitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.MuninViewState.ViewState} returns this
 */
proto.MuninViewState.ViewState.prototype.setLatitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double longitude = 2;
 * @return {number}
 */
proto.MuninViewState.ViewState.prototype.getLongitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.MuninViewState.ViewState} returns this
 */
proto.MuninViewState.ViewState.prototype.setLongitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double unknown5 = 3;
 * @return {number}
 */
proto.MuninViewState.ViewState.prototype.getUnknown5 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.MuninViewState.ViewState} returns this
 */
proto.MuninViewState.ViewState.prototype.setUnknown5 = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double yaw = 4;
 * @return {number}
 */
proto.MuninViewState.ViewState.prototype.getYaw = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.MuninViewState.ViewState} returns this
 */
proto.MuninViewState.ViewState.prototype.setYaw = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double pitch = 5;
 * @return {number}
 */
proto.MuninViewState.ViewState.prototype.getPitch = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.MuninViewState.ViewState} returns this
 */
proto.MuninViewState.ViewState.prototype.setPitch = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double unknown8 = 6;
 * @return {number}
 */
proto.MuninViewState.ViewState.prototype.getUnknown8 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.MuninViewState.ViewState} returns this
 */
proto.MuninViewState.ViewState.prototype.setUnknown8 = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MuninViewState.Address.prototype.toObject = function(opt_includeInstance) {
  return proto.MuninViewState.Address.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MuninViewState.Address} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MuninViewState.Address.toObject = function(includeInstance, msg) {
  var f, obj = {
    addr1: jspb.Message.getFieldWithDefault(msg, 1, ""),
    addr2: jspb.Message.getFieldWithDefault(msg, 2, ""),
    addr3: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MuninViewState.Address}
 */
proto.MuninViewState.Address.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MuninViewState.Address;
  return proto.MuninViewState.Address.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MuninViewState.Address} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MuninViewState.Address}
 */
proto.MuninViewState.Address.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddr1(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddr2(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddr3(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MuninViewState.Address.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MuninViewState.Address.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MuninViewState.Address} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MuninViewState.Address.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddr1();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddr2();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAddr3();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string addr1 = 1;
 * @return {string}
 */
proto.MuninViewState.Address.prototype.getAddr1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.MuninViewState.Address} returns this
 */
proto.MuninViewState.Address.prototype.setAddr1 = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string addr2 = 2;
 * @return {string}
 */
proto.MuninViewState.Address.prototype.getAddr2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.MuninViewState.Address} returns this
 */
proto.MuninViewState.Address.prototype.setAddr2 = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string addr3 = 3;
 * @return {string}
 */
proto.MuninViewState.Address.prototype.getAddr3 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.MuninViewState.Address} returns this
 */
proto.MuninViewState.Address.prototype.setAddr3 = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional ViewState viewState = 1;
 * @return {?proto.MuninViewState.ViewState}
 */
proto.MuninViewState.prototype.getViewstate = function() {
  return /** @type{?proto.MuninViewState.ViewState} */ (
    jspb.Message.getWrapperField(this, proto.MuninViewState.ViewState, 1));
};


/**
 * @param {?proto.MuninViewState.ViewState|undefined} value
 * @return {!proto.MuninViewState} returns this
*/
proto.MuninViewState.prototype.setViewstate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MuninViewState} returns this
 */
proto.MuninViewState.prototype.clearViewstate = function() {
  return this.setViewstate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MuninViewState.prototype.hasViewstate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Address address = 2;
 * @return {?proto.MuninViewState.Address}
 */
proto.MuninViewState.prototype.getAddress = function() {
  return /** @type{?proto.MuninViewState.Address} */ (
    jspb.Message.getWrapperField(this, proto.MuninViewState.Address, 2));
};


/**
 * @param {?proto.MuninViewState.Address|undefined} value
 * @return {!proto.MuninViewState} returns this
*/
proto.MuninViewState.prototype.setAddress = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MuninViewState} returns this
 */
proto.MuninViewState.prototype.clearAddress = function() {
  return this.setAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MuninViewState.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto);
